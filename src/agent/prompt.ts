import { IHttpLlmFunction, IHttpResponse } from "@samchon/openapi";
import { ILlmFunctionOfValidate } from "typia";
import { IController } from "./controller";
/**
 * Nestia A.I. chatbot prompt.
 *
 * `INestiaChatPrompt` is an union type of all possible prompts that can
 * be generated by the A.I. chatbot of the {@link NestiaChatAgent} class.
 *
 * @author Jeongho Nam - https://github.com/samchon
 */
export type IAgentPrompt =
  | IAgentPrompt.IText
  | IAgentPrompt.ISelect
  | IAgentPrompt.ICancel
  | IAgentPrompt.IExecute
  | IAgentPrompt.IDescribe;
export namespace IAgentPrompt {
  /**
   * Select prompt.
   *
   * Selection prompt about candidate functions to call.
   */
  export interface ISelect extends IBase<"select"> {
    /**
     * ID of the LLM tool call result.
     */
    id: string;

    /**
     * Operations that have been selected.
     */
    operations: INestiaAgentOperationSelection[];
  }

  /**
   * Cancel prompt.
   *
   * Cancellation prompt about the candidate functions to be discarded.
   */
  export interface ICancel extends IBase<"cancel"> {
    /**
     * ID of the LLM tool call result.
     */
    id: string;

    /**
     * Operations that have been cancelled.
     */
    operations: INestiaAgentOperationSelection[];
  }

  /**
   * Execute prompt.
   *
   * Execution prompt about the LLM function calling.
   */
  export type IExecute = IExecute.IHttp | IExecute.IClass;
  export namespace IExecute {
    export type IHttp = IBase<
      "http",
      IController.IHttp,
      IHttpLlmFunction<"chatgpt">,
      IHttpResponse
    >;
    export type IClass = IBase<
      "class",
      IController.IClass,
      ILlmFunctionOfValidate<"chatgpt">,
      any
    >;
    interface IBase<Protocol, Controller, Function, Value> {
      /**
       * Discriminator type.
       */
      type: "execute";

      /**
       * Protocol discriminator.
       */
      protocol: Protocol;

      /**
       * Belonged controller of the target function.
       */
      controller: Controller;

      /**
       * Target function to call.
       */
      function: Function;

      /**
       * ID of the LLM tool call result.
       */
      id: string;

      /**
       * Identifier name of the function.
       *
       * If {@link NestiaAgent} has multiple {@link INestiaAgentController}s,
       * the `name` can be different from target function's name.
       */
      name: string;

      /**
       * Arguments of the LLM function calling.
       */
      arguments: object;

      /**
       * Return value.
       */
      value: Value;

      toJSON(): Omit<IBase<Protocol, string, string, Value>, "toJSON">;
    }
  }

  /**
   * Description prompt.
   *
   * Description prompt about the return value of the LLM function calling.
   */
  export interface IDescribe extends IBase<"describe"> {
    /**
     * Executions of the LLM function calling.
     *
     * This prompt describes the return value of them.
     */
    executions: IExecute[];

    /**
     * Description text.
     */
    text: string;
  }

  /**
   * Text prompt.
   */
  export interface IText extends IBase<"text"> {
    /**
     * Role of the orator.
     */
    role: "assistant" | "user";

    /**
     * The text content.
     */
    text: string;
  }

  interface IBase<Type extends string> {
    /**
     * Discriminator type.
     */
    type: Type;
  }
}

/**
 * Nestia agent operation selection.
 *
 * @author Jeongho Nam - https://github.com/samchon
 */
export type INestiaAgentOperationSelection =
  | INestiaAgentOperationSelection.IHttp
  | INestiaAgentOperationSelection.IClass;
export namespace INestiaAgentOperationSelection {
  export type IHttp = IBase<
    "http",
    IController.IHttp,
    IHttpLlmFunction<"chatgpt">
  >;

  export type IClass = IBase<
    "class",
    IController.IClass,
    ILlmFunctionOfValidate<"chatgpt">
  >;

  interface IBase<Protocol, Controller, Function> {
    /**
     * Discriminator protocol.
     */
    protocol: Protocol;

    /**
     * Belonged controller of the target function.
     */
    controller: Controller;

    /**
     * Target function.
     *
     * Function that has been selected to prepare LLM function calling,
     * or canceled due to no more required.
     */
    function: Function;

    /**
     * Identifier name of the target function.
     *
     * If {@link NestiaAgent} has multiple {@link INestiaAgentController}s,
     * the `name` can be different from target function's name.
     */
    name: string;

    /**
     * The reason of the function selection or cancellation.
     */
    reason: string;

    toJSON(): Omit<IBase<Protocol, string, string>, "toJSON">;
  }
}
